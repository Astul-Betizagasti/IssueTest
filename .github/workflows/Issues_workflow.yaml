name: Issue Workflow
on: 
  issues:
    types: [opened,edited]
jobs: 
  #This job will check the issue to determine if it should be moved to a different repository
  redirectIssue:
    name: Check for issue transfer
    runs-on: ubuntu-latest
    env:
      #The 'content_analysis_response' variable is used to store the script response on step one, 
      #and then checked on step two to know if adding any labels is necessary.
      #The initial 'undefined' value will be overridden when the script runs.
      content_analysis_response: undefined
    outputs:
      result: ${{env.content_analysis_response}}
    steps:
      - uses: actions/checkout@v2
      - name: Remove conflicting chars
        uses: frabert/replace-string-action@v1.2
        id: remove_quotations
        with:
          pattern: "\""
          string: ${{ github.event.issue.title }}
          replace-with: '-'
      - name: Check Information
        id: check-info
        run: |
          echo "content_analysis_response=$(pwsh .\\.github\\scripts\\title_analyzer.ps1 "${{ steps.remove_quotations.outputs.replaced }}" )" >> $GITHUB_ENV
      - name: Label issue
        if: env.content_analysis_response != 'Valid'
        #Uses DYNAMOBOTTOKEN to allow interaction between repos
        run: |
          curl -v -u admin:${{ secrets.TOKEN }} -d '{"labels": ["${{env.content_analysis_response}}"]}' ${{ github.event.issue.url }}/labels
          
      - if: env.content_analysis_response == 'Valid'
        run: |
          echo ${{env.content_analysis_response}}
  
  #This job will scan the issue content to determing if more information is needed and act acordingly
  #Will only run if the "redirectIssue" job output a 'Valid' result
  checkIssueInformation:
    #if: needs.redirectIssue.outputs.result == 'Valid'
    name: Check for missing information
    needs: redirectIssue
    runs-on: ubuntu-latest
    env:
      #The 'analysis_response' variable is used to store the script response on step one, 
      #and then checked on step two to know if adding the label and comment is necessary.
      #The initial 'undefined' value will be overridden when the script runs.
      analysis_response: undefined
      #Comment intro
      comment_intro: "Hello ${{ github.actor }}, thank you for submitting this issue! We are super excited that you want to help us make Dynamo all that it can be."
      #issue_coment holds the comment format, while the missing information will be provided by analysis_response
      needs_more_info_comment: |
        "However, given that there has been no additional information added, this issue will be closed for now. Please reopen and provide additional information if you wish the Dynamo team to investigate further.
        Additional information requested:"
      #comment to be used if the issue is closed due to the template being empty
      close_issue_comment: "This issue was closed because no information was provided. Please, reopen the issue and fill in the template."
      #template file name
      template: "ISSUE_TEMPLATE.md"
      #label to tag the issue with if its missing information
      issue_label: needs more info
      #amount of sections from the template that can be missing information for the issue to still be considered complete
      acceptable_missing_info: 1
    steps:
      - name: test
        run: |
          echo ${{needs.redirectIssue.outputs.result}}
      - uses: actions/checkout@v2

      #Removes conflicting characters before using the issue content as a script parameter
      - name: Remove conflicting chars
        uses: frabert/replace-string-action@v1.2
        id: remove_quotations
        with:
          pattern: "\""
          string: ${{ github.event.issue.body }}
          replace-with: '-'

      #Checks for missing information inside the issue content
      - name: Check Information
        id: check-info
        run: |
          echo "analysis_response=$(pwsh .\\.github\\scripts\\issue_analyzer.ps1 "${{ env.template }}" "${{ steps.remove_quotations.outputs.replaced }}" "${{ env.acceptable_missing_info }}" )" >> $GITHUB_ENV
      
      #Closes the issue if the analysis response is "Empty"
      - name: Close issue
        if: env.analysis_response == 'Empty'
        run: |
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -d '{"body": "${{env.close_issue_comment}}"}' ${{ github.event.issue.url }}/comments
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -X PATCH -d '{"state": "closed"}' ${{ github.event.issue.url }}
      
      #Adds the "needs more info" label if needed
      - name: Label and comment issue
        if: ((env.analysis_response != 'Valid') && (env.analysis_response != 'Empty'))
        run: |
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -d '{"labels": ["${{env.issue_label}}"]}' ${{ github.event.issue.url }}/labels
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -d '{"body": "${{env.comment_intro}}"}' ${{ github.event.issue.url }}/comments
      
      #Removes the "needs more info" label if the issue has the missing information
      - name: Unlabel updated issue
        if: env.analysis_response == 'Valid'
        run: |
          echo urldecode ${{env.issue_label}}
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -X DELETE ${{ github.event.issue.url }}/labels/$(echo -ne "${{env.issue_label}}" | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g')

  
